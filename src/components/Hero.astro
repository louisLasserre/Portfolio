---
import ArrowDown from "./icons/ArrowDown.astro";
import GreenDot from "./icons/GreenDot.astro";
import Location from "./icons/Location.astro";

import CircleScrollDown from "@assets/svgs/CircleScrollDown.svg";
---

<section
  class="h-[100vh] container mx-auto flex flex-col justify-between pt-16 pb-2"
>
  <div class="max-w-lg">
    <h1 class="uppercase size-h1 leading-[4rem] md:leading-[6rem] mb-4 mt-4">
      Front-end d√©veloppeur
    </h1>
    <div class="items-center gap-3 flex" data-disapear>
      <GreenDot />
      <p class="">
        Full stack Next d√©veloppeur pour <a
          href="https://www.yalink.fr/"
          data-follow="The yak team !">yalink</a
        >
      </p>
    </div>
    <div class="items-center gap-3 flex my-4" data-disapear>
      <Location />
      <p class="">Situ√© √† Bordeaux</p>
    </div>
    <p>
      Sp√©cialis√© dans le d√©veloppement front-end, je travail toutefois √©galement
      sur du back-end, principalement en nodeJs.
    </p>
  </div>
  <div
    class="flex justify-between md:items-end items-center flex-col-reverse md:flex-row h-3/6"
  >
    <a href="/#mes-principes">
      <div class="relative mb-12 ml-6">
        <img
          data-animate
          src={CircleScrollDown}
          class="absolute h-[185%] max-w-none aspect-square left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2"
          alt="click to scroll down"
        />
        <ArrowDown />
      </div>
    </a>

    <div class="relative">
      <div
        class="w-36 aspect-square md:absolute left-4 md:-translate-y-1/3 md:-translate-x-1/3 block"
      >
        <div class="hoverImg">
          <div class="smallerCircle hidden sm:block"></div>
          <div class="biggerCircle"></div>
          <a href="/#a-propos">
            <!-- <img
            class="absolute max-w-none left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-[125%]"
            src={CircleMe}
            alt="text: click me"
          /> -->
            <img
              class="w-full h-full object-contain"
              src="/images/Me.png"
              alt="image de profile : Louis LASSERRE"
              data-follow="click to see more üëÄ"
            />
          </a>
        </div>
      </div>
      <p
        class="font-title size-h1 uppercase md:flex flex-col text-right leading-[7rem] hidden"
      >
        <span>Louis</span><span>LASSERRE</span>
      </p>
    </div>
  </div>
</section>

<style>
  .hoverImg img {
    filter: grayscale(1);
    transition: filter 0.2s;
  }
  .hoverImg a {
    z-index: 15;
    position: relative;
  }
  .hoverImg a:hover img {
    filter: grayscale(0);
  }
  .hoverImg {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .hoverImg .smallerCircle,
  .hoverImg .biggerCircle {
    content: "";
    border: 1px solid;
    border-radius: 50%;
    aspect-ratio: 1;
    position: absolute;

    transition: transform 0.2s;
  }
  .hoverImg .smallerCircle {
    width: 250%;
    border-color: #b3b3b3;
    z-index: 10;
  }
  .hoverImg .smallerCircle:hover {
    transform: scale(1.1);
  }
  .hoverImg .biggerCircle:hover {
    transform: scale(1.02);
  }
  .hoverImg .biggerCircle {
    --x: 50%;
    width: 70vw;
    border-color: #b3b3b378;
    z-index: 8;
  }
</style>

<script>
  const biggercircle = document.querySelector(".biggerCircle");
  const smallerCircle = document.querySelector(".smallerCircle");
  function animateBiggerCircle(element: HTMLElement, ratio: number) {
    if (!biggercircle) {
      return;
    }

    const elementWidth = element.clientWidth;
    const elementHeight = element.clientHeight;
    element.addEventListener("mousemove", ({ offsetX, offsetY }) => {
      // console.log(offsetX, offsetY);

      const offsetXToApply = elementWidth - (offsetX + elementWidth / 2);
      const offsetYToApply = elementHeight - (offsetY + elementHeight / 2);

      // element.style.right = `${offsetXToApply * ratio}px`;
      // element.style.bottom = `${offsetYToApply * ratio}px`;
      element.style.transition = "transform 0s";
      element.style.transform = `translate(${-offsetXToApply * ratio}px, ${
        -offsetYToApply * ratio
      }px)`;

      //element.style.setProperty("--x", `calc(50% - ${offsetXToApply}px)`);
    });
    element.addEventListener("mouseleave", (e) => {
      element.style.transition = "transform 0.2s";
      element.style.transform = "translate(0px, 0px)";
    });
  }
  animateBiggerCircle(biggercircle, 0.04);
  animateBiggerCircle(smallerCircle, 0.08);
</script>
